/*
 * Empty C++ Application
 */

/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 *
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */

#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "scugic_header.h"
#include "xgpio.h"
#include "gpio_header.h"
#include "xzdma.h"
#include "zdma_header.h"
#include "xsysmonpsu.h"
#include "sysmonpsu_header.h"
#include "xcsudma.h"
#include "csudma_header.h"
#include "xiicps.h"
#include "iicps_header.h"
#include "xuartps.h"
#include "uartps_header.h"
#include "uartps_intr_header.h"


#include "math.h"


#include "doublelist.h"

#include <iostream>
#include "nnet_common.h"
#include "nnet_dense.h"
#include "parameters.h"
#include <stdio.h>







using namespace std;





int main ()
{
   static XScuGic intc;
   //static XZDma psu_adma_0;
   //static XZDma psu_adma_1;
   //static XZDma psu_adma_2;
   //static XZDma psu_adma_3;
   //static XZDma psu_adma_4;
   //static XZDma psu_adma_5;
  // static XZDma psu_adma_6;
   //static XZDma psu_adma_7;
   static XSysMonPsu psu_ams;
   static XCsuDma psu_csudma;
   //static XZDma psu_gdma_0;
   //static XZDma psu_gdma_1;
   //static XZDma psu_gdma_2;
   //static XZDma psu_gdma_3;
   //static XZDma psu_gdma_4;
   //static XZDma psu_gdma_5;
   //static XZDma psu_gdma_6;
   //static XZDma psu_gdma_7;
   static XUartPs psu_uart_1;
   Xil_ICacheEnable();
   Xil_DCacheEnable();
   print("---Entering main---\n\r");
   std::cout << "entering main --"<<std::endl;




   List list1;
   NormalNode node0, node1, node2, node3, node4;


   list1 = CreateNewList();
   if( Insert_At_Location(0, 9, list1) )
   {
   		std::cout<<""<<std::endl;
   }


   	if( Insert_At_Location(1, 6, list1) )
   	{
   		std::cout<<""<<std::endl;
   	}


   	 /*
   	 if( Insert_At_Location(0, 1, list1) )
   	    {
   			printf("\n");
   	  }
   	  */


   	std::cout<<""<<std::endl;
   	std::cout<<"print the whole list\n"<<std::endl;
   	std::cout<<""<<std::endl;


   if(  PrintList(list1))
   	{
   		std::cout<<"print the whole list\n"<<std::endl;
   	}

      /*
   	 if( Insert_At_Location(2, 2, list1) )
   	  {
   			printf("\n");
   	  }
   */

   	 node0 = Get_Node(0, list1);

   	 node1 = Get_Node(1, list1);
   	 node2 = Get_Node(2, list1);


   	 // node4 = Get_Node(4, list1);

   	  PrintNode(node0);
   	  std::cout<<""<<std::endl;

   	  PrintNode(node1);
   	  std::cout<<""<<std::endl;


   	  PrintNode(node2);
   	  std::cout<<""<<std::endl;

   	  //PrintNode(node4);
   	  // printf("\n");
   	  // node2= Get_Node(2, list1);
   	  // node3= Get_Node(3, list1);

   	  //  PrintNode(node1);
   	  //  PrintNode(node2);
   	  //  PrintNode(node3);

   	std::cout<<""<<std::endl;


     if(  PrintList(list1))
   	 {
   			std::cout<<""<<std::endl;
   	 }











	   {
	      int Status;

	      print("\r\n Running ScuGicSelfTestExample() for psu_acpu_gic...\r\n");

	      Status = ScuGicSelfTestExample(XPAR_PSU_ACPU_GIC_DEVICE_ID);

	      if (Status == 0) {
	         print("ScuGicSelfTestExample PASSED\r\n");
	      }
	      else {
	         print("ScuGicSelfTestExample FAILED\r\n");
	      }
	   }

	   {
	       int Status;

	       Status = ScuGicInterruptSetup(&intc, XPAR_PSU_ACPU_GIC_DEVICE_ID);
	       if (Status == 0) {
	          print("ScuGic Interrupt Setup PASSED\r\n");
	       }
	       else {
	         print("ScuGic Interrupt Setup FAILED\r\n");
	      }
	   }



   {
      u32 status;

      print("\r\nRunning GpioOutputExample() for axi_gpio_0...\r\n");

      status = GpioOutputExample(XPAR_AXI_GPIO_0_DEVICE_ID,1);

      if (status == 0) {
         print("GpioOutputExample PASSED.\r\n");
      }
      else {
         print("GpioOutputExample FAILED.\r\n");
      }
   }





   {
		int Status;

		print("\r\n Running SysMonPsuPolledPrintfExample() for psu_ams...\r\n");

		Status = SysMonPsuPolledPrintfExample(XPAR_PSU_AMS_DEVICE_ID);

		if (Status == 0) {
			print("SysMonPsuPolledPrintfExample PASSED\r\n");
		}
		else {
			print("SysMonPsuPolledPrintfExample FAILED\r\n");
		}
	}
	{
		int Status;

		print("\r\n Running SysMonPsuIntrExample()  for psu_ams...\r\n");

		Status = SysMonPsuIntrExample(&intc, &psu_ams, \
									XPAR_PSU_AMS_DEVICE_ID, \
									XPAR_PSU_AMS_INTR);

		if (Status == 0) {
			print("SysMonPsu IntrExample PASSED\r\n");
		}
		else {
			print("SysMonPsu IntrExample FAILED\r\n");
		}

	}



   {
      int Status;

      print("\r\n Running XCsuDma_SelfTestExample() for psu_csudma...\r\n");

      Status = XCsuDma_SelfTestExample(XPAR_PSU_CSUDMA_DEVICE_ID);

      if (Status == 0) {
         print("XCsuDma_SelfTestExample PASSED\r\n");
      }
      else {
         print("XCsuDma_SelfTestExample FAILED\r\n");
      }

   }
   {
      int Status;

      print("\r\n Running Interrupt Test  for psu_csudma...\r\n");

      Status = XCsuDma_IntrExample(&intc, &psu_csudma, \
                                 XPAR_PSU_CSUDMA_DEVICE_ID, \
                                 XPAR_PSU_CSUDMA_INTR);

      if (Status == 0) {
         print("CSUDMA Interrupt Example PASSED\r\n");
      }
      else {
         print("CSUDMA Interrupt Example FAILED\r\n");
      }

   }



   {
      int Status;

      print("\r\n Running IicPsSelfTestExample() for psu_i2c_0...\r\n");

      Status = IicPsSelfTestExample(XPAR_PSU_I2C_0_DEVICE_ID);

      if (Status == 0) {
         print("IicPsSelfTestExample PASSED\r\n");
      }
      else {
         print("IicPsSelfTestExample FAILED\r\n");
      }
   }



   {
      int Status;

      print("\r\n Running IicPsSelfTestExample() for psu_i2c_1...\r\n");

      Status = IicPsSelfTestExample(XPAR_PSU_I2C_1_DEVICE_ID);

      if (Status == 0) {
         print("IicPsSelfTestExample PASSED\r\n");
      }
      else {
         print("IicPsSelfTestExample FAILED\r\n");
      }
   }



   {
      u32 status;

      print("\r\nRunning GpioOutputExample() for axi_gpio_1...\r\n");

      status = GpioOutputExample(XPAR_AXI_GPIO_1_DEVICE_ID,2);

      if (status == 0) {
         print("GpioOutputExample PASSED.\r\n");
      }
      else {
         print("GpioOutputExample FAILED.\r\n");
      }
   }


   /*
    * Peripheral Test will not be run for psu_uart_0
    * because it has been selected as the STDOUT device
    */




   {
      int Status;

      print("\r\nRunning UartPsPolledExample() for psu_uart_1...\r\n");
      Status = UartPsPolledExample(XPAR_PSU_UART_1_DEVICE_ID);
      if (Status == 0) {
         print("UartPsPolledExample PASSED\r\n");
      }
      else {
         print("UartPsPolledExample FAILED\r\n");
      }
   }
   {
      int Status;

      print("\r\n Running Interrupt Test for psu_uart_1...\r\n");

      Status = UartPsIntrExample(&intc, &psu_uart_1, \
                                  XPAR_PSU_UART_1_DEVICE_ID, \
                                  XPAR_PSU_UART_1_INTR);

      if (Status == 0) {
         print("UartPsIntrExample PASSED\r\n");
      }
      else {
         print("UartPsIntrExample FAILED\r\n");
      }

   }



















   print("---Exiting main---\n\r");
   Xil_DCacheDisable();
   Xil_ICacheDisable();
   return 0;
}



